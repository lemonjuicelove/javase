多线程笔记

1、1 什么是进程，什么是线程：
        进程是一个应用程序(1个进程是一个软件)
        线程是一个进程中的执行场景/执行单元
        一个进程可以启动多个线程

1、2 对于java程序来说，当在DOS命令窗口中输入：java HelloWorld 回车之后
     会先启动JVM，而JVM就是一个进程，JVM再启动一个主线程调用main方法，同时在启动一个垃圾回收线程
     负责看护，回收垃圾。最起码，现在的java程序中至少有两个线程并发，一个是执行main方法的主线程，
     一个是垃圾回收线程。

1、3 进程和线程是什么关系：
        进程可以看做是现实生活中的公司
        线程可以看做是公司中的员工

        注意：进程A和进程B的内存独立不共享

             线程A和线程B，堆内存和方法区内存共享，但是栈内存独立，一个线程一个栈(在java中)

             假设启动10个线程，会有10个栈空间，每个栈和每个栈之间互不干扰，各自执行各自的，这就是多线程并发

             java中之所以有多线程机制，目的就是为了提高程序的处理效率

1、4 思考：
        使用了多线程机制之后，main方法结束，有可能程序也不会结束，main方法结束只是主线程结束了，主栈空了，
        其他的栈(线程)可能还在继续执行

1、5 分析：对于单核的CPU，可以做到真正的多线程并发吗？

     对于多核的CPU电脑来说，真正的多线程并发是没有问题的：
        4核CPU表示同一个时间点上，可以真正的有4个线程并发执行

     什么是真正的多线程并发：
        t1线程执行t1的，t2线程执行t2的。
        t1不会影响t2，t2也不会影响t1，这叫做真正的多线程并发

     单核的CPU表示只有一个大脑：
        不能做到真正的多线程并发，但是可以做到给人一种"多线程并发"的感觉。对于单核的CPU来说，
        在某一个时间点上实际上只能处理一件事情，但是由于CPU的处理速度很快，多个线程之间频繁切换执行，
        给人的感觉是：多个事情同时在做。


java语言中，实现线程的两种方式：

    第一种方式：编写一个类，直接继承java.lang.Thread，重写run方法
        // 定义线程类
        public class MyThread extends Thread{
            public void run(){

            }
        }
        // 创建线程对象
        MyThread mt = new MyThread();
        // 启动线程
        mt.start;


    第二种方式：编写一个类，实现java.lang.Runnable接口，实现run方法
        // 定义一个可运行的类
        class MyRunnable implements Runnable{
            public void run() {

            }
        }
        // 创建可运行对象
        MyRunnable mr = new MyRunnable();
        // 将可运行对象封装成一个线程对象
        Thread mt = new Thread(mr);
        // 启动线程
        mt.start();

1、6 线程生命周期：
        新建状态、就绪状态、运行状态、阻塞状态、死亡状态