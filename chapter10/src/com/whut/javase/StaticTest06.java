package com.whut.javase;

/*
 * 	栈：方法只要执行，就会压栈(存储局部变量)
 * 	堆：new出来的对象都在堆中。(存储实例变量)
 * 	方法区：类的信息，字节码信息，代码片段。(静态变量)
 *
 * 	方法的代码片段放在方法区，但是方法执行过程当中需要的内存在栈中
 */

/*
 * 		第一：对于一个方法来说，方法体中的代码是有顺序的
 * 		第二：静态代码块1和静态代码块2是有先后顺序的
 * 		第三：静态代码块和静态变量是有先后顺序的
 */
public class StaticTest06 {

    // 静态变量在类加载时初始化，存储在方法区中
    static int i = 100;

    // 静态代码块在类加载时执行
    static {
        // 静态变量和静态代码块一般是自上而下的顺序执行，所以可以访问i
        System.out.println("i = " + i);
    }

    // k是实例变量，在构造方法执行时内存空间才会开辟
    // 构造方法在创建对象的时候执行
    int k = 200;

    static {
        // 类加载时，k变量空间还没有开辟出来，所以不能访问
        // System.out.println("k = " + k);

        // 静态代码块和静态变量都是在类加载时执行，时间相同，只能靠代码的自上而下顺序来决定谁先谁后
        // System.out.println("a = " + a);
    }
    // 静态变量在静态代码块下面，所以后执行，上面无法访问
    // static int a = 300;

    // 入口方法(main方法执行之前实际上执行了很多代码)
    public static void main(String[] args) {
        System.out.println("main begin");
    }

}
